<?xml version="1.0"?>
<phpunit xmlns="https://schema.phpunit.de/coverage/1.0">
  <file name="ResponseParser.php" path="/">
    <totals>
      <lines total="171" comments="15" code="156" executable="88" executed="88" percent="100.00"/>
      <methods count="9" tested="9" percent="100.00"/>
      <functions count="0" tested="0" percent="0"/>
      <classes count="1" tested="1" percent="100.00"/>
      <traits count="0" tested="0" percent="0"/>
    </totals>
    <class name="Neo4j\QueryAPI\ResponseParser" start="16" executable="88" executed="88" crap="20">
      <namespace name="Neo4j\QueryAPI"/>
      <method name="__construct" signature="__construct(Neo4j\QueryAPI\OGM $ogm)" start="18" end="20" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="parseRunQueryResponse" signature="parseRunQueryResponse(Psr\Http\Message\ResponseInterface $response): Neo4j\QueryAPI\Results\ResultSet" start="22" end="33" crap="2" executable="7" executed="7" coverage="100"/>
      <method name="validateAndDecodeResponse" signature="validateAndDecodeResponse(Psr\Http\Message\ResponseInterface $response): array" start="35" end="50" crap="3" executable="8" executed="8" coverage="100"/>
      <method name="mapRows" signature="mapRows(array $fields, array $values): array" start="60" end="71" crap="2" executable="9" executed="9" coverage="100"/>
      <method name="formatOGMOutput" signature="formatOGMOutput(mixed $value): mixed" start="79" end="86" crap="4" executable="3" executed="3" coverage="100"/>
      <method name="buildCounters" signature="buildCounters(array $countersData): Neo4j\QueryAPI\Objects\ResultCounters" start="88" end="105" crap="1" executable="15" executed="15" coverage="100"/>
      <method name="buildBookmarks" signature="buildBookmarks(array $bookmarksData): Neo4j\QueryAPI\Objects\Bookmarks" start="107" end="110" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="getAccessMode" signature="getAccessMode(string $accessModeData): Neo4j\QueryAPI\Enums\AccessMode" start="112" end="115" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="buildProfiledQueryPlan" signature="buildProfiledQueryPlan(mixed $queryPlanData): ?Neo4j\QueryAPI\Objects\ProfiledQueryPlan" start="117" end="169" crap="5" executable="43" executed="43" coverage="100"/>
    </class>
    <coverage>
      <line nr="20">
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testRunWithWriteAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testRunWithReadAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testReadModeWithWriteQuery"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testWriteModeWithReadQuery"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\BookmarksIntegrationTest::testCreateBookmarks"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\BookmarksIntegrationTest::testInvalidBookmarkThrowsException"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithExactNames"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithSingleName"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithInteger"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithFloat"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithNull"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithBoolean"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithString"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithArray"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithDate"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithDuration"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithWGS84_2DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithWGS84_3DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithCartesian2DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithCartesian3DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithNode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithPath"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithMap"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithRelationship"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testParseRunQueryResponse"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testInvalidQueryHandling"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testCounters"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testInvalidQueryException"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPITest::testLoginWithNullConfiguration"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPITest::testConfigOnly"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testTransactionCommit"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testTransactionRollback"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testCreateNodeAndCommit"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testCreateNodeAndRollback"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateMovieQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateFriendsQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateKnowsBidirectionalRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateActedInRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testChildQueryPlanExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testCorrectClientSetup"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testRunSuccess"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testParseValidResponse"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testParseInvalidResponse"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testGetAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testParseBookmarks"/>
      </line>
      <line nr="24">
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testRunWithWriteAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testRunWithReadAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testReadModeWithWriteQuery"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testWriteModeWithReadQuery"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\BookmarksIntegrationTest::testCreateBookmarks"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\BookmarksIntegrationTest::testInvalidBookmarkThrowsException"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithExactNames"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithSingleName"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithInteger"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithFloat"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithNull"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithBoolean"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithString"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithArray"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithDate"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithDuration"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithWGS84_2DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithWGS84_3DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithCartesian2DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithCartesian3DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithNode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithPath"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithMap"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithRelationship"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testParseRunQueryResponse"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testInvalidQueryHandling"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testCounters"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testInvalidQueryException"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testTransactionCommit"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testTransactionRollback"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testCreateNodeAndCommit"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testCreateNodeAndRollback"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateMovieQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateFriendsQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateKnowsBidirectionalRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateActedInRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testChildQueryPlanExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testRunSuccess"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testParseValidResponse"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testParseInvalidResponse"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testGetAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testParseBookmarks"/>
      </line>
      <line nr="26">
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testRunWithWriteAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testRunWithReadAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testWriteModeWithReadQuery"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\BookmarksIntegrationTest::testCreateBookmarks"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithExactNames"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithSingleName"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithInteger"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithFloat"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithNull"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithBoolean"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithString"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithArray"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithDate"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithDuration"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithWGS84_2DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithWGS84_3DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithCartesian2DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithCartesian3DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithNode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithPath"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithMap"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithRelationship"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testParseRunQueryResponse"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testInvalidQueryHandling"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testCounters"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testInvalidQueryException"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testTransactionCommit"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testTransactionRollback"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testCreateNodeAndCommit"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testCreateNodeAndRollback"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateMovieQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateFriendsQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateKnowsBidirectionalRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateActedInRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testChildQueryPlanExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testRunSuccess"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testParseValidResponse"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testGetAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testParseBookmarks"/>
      </line>
      <line nr="27">
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testRunWithWriteAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testRunWithReadAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testWriteModeWithReadQuery"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\BookmarksIntegrationTest::testCreateBookmarks"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithExactNames"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithSingleName"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithInteger"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithFloat"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithNull"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithBoolean"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithString"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithArray"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithDate"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithDuration"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithWGS84_2DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithWGS84_3DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithCartesian2DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithCartesian3DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithNode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithPath"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithMap"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithRelationship"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testParseRunQueryResponse"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testInvalidQueryHandling"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testCounters"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testInvalidQueryException"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testTransactionCommit"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testTransactionRollback"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testCreateNodeAndCommit"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testCreateNodeAndRollback"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateMovieQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateFriendsQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateKnowsBidirectionalRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateActedInRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testChildQueryPlanExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testRunSuccess"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testParseValidResponse"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testGetAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testParseBookmarks"/>
      </line>
      <line nr="28">
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testRunWithWriteAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testRunWithReadAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testWriteModeWithReadQuery"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\BookmarksIntegrationTest::testCreateBookmarks"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithExactNames"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithSingleName"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithInteger"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithFloat"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithNull"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithBoolean"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithString"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithArray"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithDate"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithDuration"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithWGS84_2DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithWGS84_3DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithCartesian2DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithCartesian3DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithNode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithPath"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithMap"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithRelationship"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testParseRunQueryResponse"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testInvalidQueryHandling"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testCounters"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testInvalidQueryException"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testTransactionCommit"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testTransactionRollback"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testCreateNodeAndCommit"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testCreateNodeAndRollback"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateMovieQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateFriendsQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateKnowsBidirectionalRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateActedInRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testChildQueryPlanExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testRunSuccess"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testParseValidResponse"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testGetAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testParseBookmarks"/>
      </line>
      <line nr="29">
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testRunWithWriteAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testRunWithReadAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testWriteModeWithReadQuery"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\BookmarksIntegrationTest::testCreateBookmarks"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithExactNames"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithSingleName"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithInteger"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithFloat"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithNull"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithBoolean"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithString"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithArray"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithDate"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithDuration"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithWGS84_2DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithWGS84_3DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithCartesian2DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithCartesian3DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithNode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithPath"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithMap"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithRelationship"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testParseRunQueryResponse"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testInvalidQueryHandling"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testCounters"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testInvalidQueryException"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testTransactionCommit"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testTransactionRollback"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testCreateNodeAndCommit"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testCreateNodeAndRollback"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateMovieQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateFriendsQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateKnowsBidirectionalRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateActedInRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testChildQueryPlanExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testRunSuccess"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testParseValidResponse"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testGetAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testParseBookmarks"/>
      </line>
      <line nr="30">
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testRunWithWriteAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testRunWithReadAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testWriteModeWithReadQuery"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\BookmarksIntegrationTest::testCreateBookmarks"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithExactNames"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithSingleName"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithInteger"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithFloat"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithNull"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithBoolean"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithString"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithArray"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithDate"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithDuration"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithWGS84_2DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithWGS84_3DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithCartesian2DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithCartesian3DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithNode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithPath"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithMap"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithRelationship"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testParseRunQueryResponse"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testInvalidQueryHandling"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testCounters"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testInvalidQueryException"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testTransactionCommit"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testTransactionRollback"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testCreateNodeAndCommit"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testCreateNodeAndRollback"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateMovieQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateFriendsQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateKnowsBidirectionalRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateActedInRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testChildQueryPlanExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testRunSuccess"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testParseValidResponse"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testGetAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testParseBookmarks"/>
      </line>
      <line nr="32">
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testRunWithWriteAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testRunWithReadAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testWriteModeWithReadQuery"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\BookmarksIntegrationTest::testCreateBookmarks"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithExactNames"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithSingleName"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithInteger"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithFloat"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithNull"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithBoolean"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithString"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithArray"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithDate"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithDuration"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithWGS84_2DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithWGS84_3DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithCartesian2DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithCartesian3DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithNode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithPath"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithMap"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithRelationship"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testParseRunQueryResponse"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testInvalidQueryHandling"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testCounters"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testInvalidQueryException"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testTransactionCommit"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testTransactionRollback"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testCreateNodeAndCommit"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testCreateNodeAndRollback"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateMovieQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateFriendsQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateKnowsBidirectionalRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateActedInRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testChildQueryPlanExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testRunSuccess"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testParseValidResponse"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testGetAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testParseBookmarks"/>
      </line>
      <line nr="37">
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testRunWithWriteAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testRunWithReadAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testReadModeWithWriteQuery"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testWriteModeWithReadQuery"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\BookmarksIntegrationTest::testCreateBookmarks"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\BookmarksIntegrationTest::testInvalidBookmarkThrowsException"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithExactNames"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithSingleName"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithInteger"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithFloat"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithNull"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithBoolean"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithString"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithArray"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithDate"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithDuration"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithWGS84_2DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithWGS84_3DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithCartesian2DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithCartesian3DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithNode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithPath"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithMap"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithRelationship"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testParseRunQueryResponse"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testInvalidQueryHandling"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testCounters"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testInvalidQueryException"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testTransactionCommit"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testTransactionRollback"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testCreateNodeAndCommit"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testCreateNodeAndRollback"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateMovieQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateFriendsQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateKnowsBidirectionalRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateActedInRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testChildQueryPlanExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testRunSuccess"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testParseValidResponse"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testParseInvalidResponse"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testGetAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testParseBookmarks"/>
      </line>
      <line nr="38">
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testReadModeWithWriteQuery"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\BookmarksIntegrationTest::testInvalidBookmarkThrowsException"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testInvalidQueryHandling"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testInvalidQueryException"/>
      </line>
      <line nr="39">
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testReadModeWithWriteQuery"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\BookmarksIntegrationTest::testInvalidBookmarkThrowsException"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testInvalidQueryHandling"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testInvalidQueryException"/>
      </line>
      <line nr="42">
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testRunWithWriteAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testRunWithReadAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testWriteModeWithReadQuery"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\BookmarksIntegrationTest::testCreateBookmarks"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithExactNames"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithSingleName"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithInteger"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithFloat"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithNull"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithBoolean"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithString"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithArray"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithDate"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithDuration"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithWGS84_2DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithWGS84_3DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithCartesian2DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithCartesian3DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithNode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithPath"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithMap"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithRelationship"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testParseRunQueryResponse"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testInvalidQueryHandling"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testCounters"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testInvalidQueryException"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testTransactionCommit"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testTransactionRollback"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testCreateNodeAndCommit"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testCreateNodeAndRollback"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateMovieQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateFriendsQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateKnowsBidirectionalRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateActedInRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testChildQueryPlanExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testRunSuccess"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testParseValidResponse"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testParseInvalidResponse"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testGetAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testParseBookmarks"/>
      </line>
      <line nr="43">
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testRunWithWriteAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testRunWithReadAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testWriteModeWithReadQuery"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\BookmarksIntegrationTest::testCreateBookmarks"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithExactNames"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithSingleName"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithInteger"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithFloat"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithNull"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithBoolean"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithString"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithArray"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithDate"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithDuration"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithWGS84_2DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithWGS84_3DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithCartesian2DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithCartesian3DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithNode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithPath"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithMap"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithRelationship"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testParseRunQueryResponse"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testInvalidQueryHandling"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testCounters"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testInvalidQueryException"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testTransactionCommit"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testTransactionRollback"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testCreateNodeAndCommit"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testCreateNodeAndRollback"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateMovieQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateFriendsQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateKnowsBidirectionalRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateActedInRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testChildQueryPlanExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testRunSuccess"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testParseValidResponse"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testParseInvalidResponse"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testGetAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testParseBookmarks"/>
      </line>
      <line nr="45">
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testRunWithWriteAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testRunWithReadAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testWriteModeWithReadQuery"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\BookmarksIntegrationTest::testCreateBookmarks"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithExactNames"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithSingleName"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithInteger"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithFloat"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithNull"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithBoolean"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithString"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithArray"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithDate"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithDuration"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithWGS84_2DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithWGS84_3DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithCartesian2DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithCartesian3DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithNode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithPath"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithMap"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithRelationship"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testParseRunQueryResponse"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testInvalidQueryHandling"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testCounters"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testInvalidQueryException"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testTransactionCommit"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testTransactionRollback"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testCreateNodeAndCommit"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testCreateNodeAndRollback"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateMovieQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateFriendsQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateKnowsBidirectionalRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateActedInRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testChildQueryPlanExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testRunSuccess"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testParseValidResponse"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testParseInvalidResponse"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testGetAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testParseBookmarks"/>
      </line>
      <line nr="46">
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testParseInvalidResponse"/>
      </line>
      <line nr="49">
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testRunWithWriteAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testRunWithReadAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testWriteModeWithReadQuery"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\BookmarksIntegrationTest::testCreateBookmarks"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithExactNames"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithSingleName"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithInteger"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithFloat"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithNull"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithBoolean"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithString"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithArray"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithDate"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithDuration"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithWGS84_2DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithWGS84_3DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithCartesian2DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithCartesian3DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithNode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithPath"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithMap"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithRelationship"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testParseRunQueryResponse"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testInvalidQueryHandling"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testCounters"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testInvalidQueryException"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testTransactionCommit"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testTransactionRollback"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testCreateNodeAndCommit"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testCreateNodeAndRollback"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateMovieQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateFriendsQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateKnowsBidirectionalRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateActedInRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testChildQueryPlanExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testRunSuccess"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testParseValidResponse"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testGetAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testParseBookmarks"/>
      </line>
      <line nr="62">
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testRunWithWriteAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testRunWithReadAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testWriteModeWithReadQuery"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\BookmarksIntegrationTest::testCreateBookmarks"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithExactNames"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithSingleName"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithInteger"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithFloat"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithNull"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithBoolean"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithString"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithArray"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithDate"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithDuration"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithWGS84_2DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithWGS84_3DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithCartesian2DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithCartesian3DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithNode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithPath"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithMap"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithRelationship"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testParseRunQueryResponse"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testInvalidQueryHandling"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testCounters"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testInvalidQueryException"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testTransactionCommit"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testTransactionRollback"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testCreateNodeAndCommit"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testCreateNodeAndRollback"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateMovieQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateFriendsQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateKnowsBidirectionalRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateActedInRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testChildQueryPlanExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testRunSuccess"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testParseValidResponse"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testGetAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testParseBookmarks"/>
      </line>
      <line nr="63">
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testRunWithWriteAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testRunWithReadAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testWriteModeWithReadQuery"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\BookmarksIntegrationTest::testCreateBookmarks"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithExactNames"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithSingleName"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithInteger"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithFloat"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithNull"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithBoolean"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithString"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithArray"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithDate"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithDuration"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithWGS84_2DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithWGS84_3DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithCartesian2DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithCartesian3DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithNode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithPath"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithMap"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithRelationship"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testParseRunQueryResponse"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testInvalidQueryHandling"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testCounters"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testInvalidQueryException"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testTransactionCommit"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testTransactionRollback"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testCreateNodeAndCommit"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testCreateNodeAndRollback"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateMovieQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateFriendsQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateKnowsBidirectionalRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateActedInRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testChildQueryPlanExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testRunSuccess"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testParseValidResponse"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testGetAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testParseBookmarks"/>
      </line>
      <line nr="64">
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testRunWithWriteAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testRunWithReadAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testWriteModeWithReadQuery"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\BookmarksIntegrationTest::testCreateBookmarks"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithExactNames"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithSingleName"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithInteger"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithFloat"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithNull"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithBoolean"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithString"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithArray"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithDate"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithDuration"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithWGS84_2DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithWGS84_3DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithCartesian2DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithCartesian3DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithNode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithPath"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithMap"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithRelationship"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testParseRunQueryResponse"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testInvalidQueryHandling"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testCounters"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testInvalidQueryException"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testTransactionCommit"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testTransactionRollback"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testCreateNodeAndCommit"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testCreateNodeAndRollback"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateMovieQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateFriendsQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateKnowsBidirectionalRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateActedInRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testChildQueryPlanExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testRunSuccess"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testParseValidResponse"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testGetAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testParseBookmarks"/>
      </line>
      <line nr="65">
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testRunWithWriteAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testRunWithReadAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testWriteModeWithReadQuery"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\BookmarksIntegrationTest::testCreateBookmarks"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithExactNames"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithSingleName"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithInteger"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithFloat"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithNull"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithBoolean"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithString"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithArray"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithDate"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithDuration"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithWGS84_2DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithWGS84_3DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithCartesian2DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithCartesian3DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithNode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithPath"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithMap"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithRelationship"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testParseRunQueryResponse"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testInvalidQueryHandling"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testCounters"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testInvalidQueryException"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testTransactionCommit"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testTransactionRollback"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testCreateNodeAndCommit"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testCreateNodeAndRollback"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateMovieQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateFriendsQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateKnowsBidirectionalRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateActedInRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testChildQueryPlanExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testRunSuccess"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testParseValidResponse"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testGetAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testParseBookmarks"/>
      </line>
      <line nr="66">
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testRunWithWriteAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testRunWithReadAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testWriteModeWithReadQuery"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\BookmarksIntegrationTest::testCreateBookmarks"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithExactNames"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithSingleName"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithInteger"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithFloat"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithNull"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithBoolean"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithString"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithArray"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithDate"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithDuration"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithWGS84_2DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithWGS84_3DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithCartesian2DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithCartesian3DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithNode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithPath"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithMap"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithRelationship"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testParseRunQueryResponse"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testInvalidQueryHandling"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testCounters"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testInvalidQueryException"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testTransactionCommit"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testTransactionRollback"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testCreateNodeAndCommit"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testCreateNodeAndRollback"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateMovieQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateFriendsQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateKnowsBidirectionalRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateActedInRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testChildQueryPlanExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testRunSuccess"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testParseValidResponse"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testGetAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testParseBookmarks"/>
      </line>
      <line nr="67">
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testRunWithWriteAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testRunWithReadAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testWriteModeWithReadQuery"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\BookmarksIntegrationTest::testCreateBookmarks"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithExactNames"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithSingleName"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithInteger"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithFloat"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithNull"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithBoolean"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithString"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithArray"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithDate"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithDuration"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithWGS84_2DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithWGS84_3DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithCartesian2DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithCartesian3DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithNode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithPath"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithMap"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithRelationship"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testParseRunQueryResponse"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testInvalidQueryHandling"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testCounters"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testInvalidQueryException"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testTransactionCommit"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testTransactionRollback"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testCreateNodeAndCommit"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testCreateNodeAndRollback"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateMovieQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateFriendsQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateKnowsBidirectionalRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateActedInRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testChildQueryPlanExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testRunSuccess"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testParseValidResponse"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testGetAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testParseBookmarks"/>
      </line>
      <line nr="68">
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testRunWithWriteAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testRunWithReadAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testWriteModeWithReadQuery"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\BookmarksIntegrationTest::testCreateBookmarks"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithExactNames"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithSingleName"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithInteger"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithFloat"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithNull"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithBoolean"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithString"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithArray"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithDate"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithDuration"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithWGS84_2DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithWGS84_3DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithCartesian2DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithCartesian3DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithNode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithPath"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithMap"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithRelationship"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testParseRunQueryResponse"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testInvalidQueryHandling"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testCounters"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testInvalidQueryException"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testTransactionCommit"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testTransactionRollback"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testCreateNodeAndCommit"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testCreateNodeAndRollback"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateMovieQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateFriendsQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateKnowsBidirectionalRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateActedInRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testChildQueryPlanExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testRunSuccess"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testParseValidResponse"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testGetAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testParseBookmarks"/>
      </line>
      <line nr="81">
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testRunWithWriteAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testRunWithReadAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\BookmarksIntegrationTest::testCreateBookmarks"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithExactNames"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithSingleName"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithInteger"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithFloat"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithNull"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithBoolean"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithString"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithArray"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithDate"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithDuration"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithWGS84_2DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithWGS84_3DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithCartesian2DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithCartesian3DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithNode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithPath"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithMap"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithRelationship"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testParseRunQueryResponse"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testTransactionCommit"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testTransactionRollback"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testCreateNodeAndCommit"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testCreateNodeAndRollback"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testRunSuccess"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testParseValidResponse"/>
      </line>
      <line nr="82">
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testRunWithWriteAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testRunWithReadAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\BookmarksIntegrationTest::testCreateBookmarks"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithExactNames"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithSingleName"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithInteger"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithFloat"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithNull"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithBoolean"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithString"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithArray"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithDate"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithDuration"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithWGS84_2DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithWGS84_3DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithCartesian2DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithCartesian3DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithNode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithPath"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithMap"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithRelationship"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testParseRunQueryResponse"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testTransactionCommit"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testTransactionRollback"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testCreateNodeAndCommit"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testCreateNodeAndRollback"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testRunSuccess"/>
      </line>
      <line nr="85">
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testParseValidResponse"/>
      </line>
      <line nr="90">
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testRunWithWriteAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testRunWithReadAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testWriteModeWithReadQuery"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\BookmarksIntegrationTest::testCreateBookmarks"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithExactNames"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithSingleName"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithInteger"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithFloat"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithNull"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithBoolean"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithString"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithArray"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithDate"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithDuration"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithWGS84_2DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithWGS84_3DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithCartesian2DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithCartesian3DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithNode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithPath"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithMap"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithRelationship"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testParseRunQueryResponse"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testInvalidQueryHandling"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testCounters"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testInvalidQueryException"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testTransactionCommit"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testTransactionRollback"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testCreateNodeAndCommit"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testCreateNodeAndRollback"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateMovieQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateFriendsQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateKnowsBidirectionalRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateActedInRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testChildQueryPlanExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testParseValidResponse"/>
      </line>
      <line nr="91">
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testRunWithWriteAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testRunWithReadAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testWriteModeWithReadQuery"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\BookmarksIntegrationTest::testCreateBookmarks"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithExactNames"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithSingleName"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithInteger"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithFloat"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithNull"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithBoolean"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithString"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithArray"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithDate"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithDuration"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithWGS84_2DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithWGS84_3DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithCartesian2DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithCartesian3DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithNode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithPath"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithMap"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithRelationship"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testParseRunQueryResponse"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testInvalidQueryHandling"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testCounters"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testInvalidQueryException"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testTransactionCommit"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testTransactionRollback"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testCreateNodeAndCommit"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testCreateNodeAndRollback"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateMovieQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateFriendsQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateKnowsBidirectionalRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateActedInRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testChildQueryPlanExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testParseValidResponse"/>
      </line>
      <line nr="92">
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testRunWithWriteAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testRunWithReadAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testWriteModeWithReadQuery"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\BookmarksIntegrationTest::testCreateBookmarks"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithExactNames"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithSingleName"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithInteger"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithFloat"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithNull"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithBoolean"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithString"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithArray"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithDate"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithDuration"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithWGS84_2DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithWGS84_3DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithCartesian2DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithCartesian3DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithNode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithPath"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithMap"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithRelationship"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testParseRunQueryResponse"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testInvalidQueryHandling"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testCounters"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testInvalidQueryException"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testTransactionCommit"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testTransactionRollback"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testCreateNodeAndCommit"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testCreateNodeAndRollback"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateMovieQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateFriendsQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateKnowsBidirectionalRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateActedInRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testChildQueryPlanExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testParseValidResponse"/>
      </line>
      <line nr="93">
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testRunWithWriteAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testRunWithReadAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testWriteModeWithReadQuery"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\BookmarksIntegrationTest::testCreateBookmarks"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithExactNames"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithSingleName"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithInteger"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithFloat"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithNull"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithBoolean"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithString"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithArray"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithDate"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithDuration"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithWGS84_2DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithWGS84_3DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithCartesian2DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithCartesian3DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithNode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithPath"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithMap"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithRelationship"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testParseRunQueryResponse"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testInvalidQueryHandling"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testCounters"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testInvalidQueryException"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testTransactionCommit"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testTransactionRollback"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testCreateNodeAndCommit"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testCreateNodeAndRollback"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateMovieQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateFriendsQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateKnowsBidirectionalRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateActedInRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testChildQueryPlanExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testParseValidResponse"/>
      </line>
      <line nr="94">
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testRunWithWriteAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testRunWithReadAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testWriteModeWithReadQuery"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\BookmarksIntegrationTest::testCreateBookmarks"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithExactNames"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithSingleName"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithInteger"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithFloat"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithNull"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithBoolean"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithString"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithArray"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithDate"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithDuration"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithWGS84_2DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithWGS84_3DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithCartesian2DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithCartesian3DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithNode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithPath"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithMap"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithRelationship"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testParseRunQueryResponse"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testInvalidQueryHandling"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testCounters"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testInvalidQueryException"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testTransactionCommit"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testTransactionRollback"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testCreateNodeAndCommit"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testCreateNodeAndRollback"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateMovieQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateFriendsQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateKnowsBidirectionalRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateActedInRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testChildQueryPlanExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testParseValidResponse"/>
      </line>
      <line nr="95">
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testRunWithWriteAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testRunWithReadAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testWriteModeWithReadQuery"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\BookmarksIntegrationTest::testCreateBookmarks"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithExactNames"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithSingleName"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithInteger"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithFloat"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithNull"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithBoolean"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithString"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithArray"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithDate"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithDuration"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithWGS84_2DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithWGS84_3DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithCartesian2DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithCartesian3DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithNode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithPath"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithMap"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithRelationship"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testParseRunQueryResponse"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testInvalidQueryHandling"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testCounters"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testInvalidQueryException"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testTransactionCommit"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testTransactionRollback"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testCreateNodeAndCommit"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testCreateNodeAndRollback"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateMovieQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateFriendsQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateKnowsBidirectionalRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateActedInRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testChildQueryPlanExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testParseValidResponse"/>
      </line>
      <line nr="96">
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testRunWithWriteAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testRunWithReadAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testWriteModeWithReadQuery"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\BookmarksIntegrationTest::testCreateBookmarks"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithExactNames"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithSingleName"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithInteger"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithFloat"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithNull"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithBoolean"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithString"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithArray"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithDate"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithDuration"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithWGS84_2DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithWGS84_3DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithCartesian2DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithCartesian3DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithNode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithPath"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithMap"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithRelationship"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testParseRunQueryResponse"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testInvalidQueryHandling"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testCounters"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testInvalidQueryException"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testTransactionCommit"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testTransactionRollback"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testCreateNodeAndCommit"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testCreateNodeAndRollback"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateMovieQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateFriendsQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateKnowsBidirectionalRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateActedInRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testChildQueryPlanExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testParseValidResponse"/>
      </line>
      <line nr="97">
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testRunWithWriteAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testRunWithReadAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testWriteModeWithReadQuery"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\BookmarksIntegrationTest::testCreateBookmarks"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithExactNames"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithSingleName"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithInteger"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithFloat"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithNull"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithBoolean"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithString"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithArray"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithDate"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithDuration"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithWGS84_2DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithWGS84_3DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithCartesian2DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithCartesian3DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithNode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithPath"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithMap"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithRelationship"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testParseRunQueryResponse"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testInvalidQueryHandling"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testCounters"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testInvalidQueryException"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testTransactionCommit"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testTransactionRollback"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testCreateNodeAndCommit"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testCreateNodeAndRollback"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateMovieQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateFriendsQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateKnowsBidirectionalRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateActedInRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testChildQueryPlanExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testParseValidResponse"/>
      </line>
      <line nr="98">
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testRunWithWriteAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testRunWithReadAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testWriteModeWithReadQuery"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\BookmarksIntegrationTest::testCreateBookmarks"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithExactNames"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithSingleName"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithInteger"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithFloat"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithNull"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithBoolean"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithString"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithArray"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithDate"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithDuration"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithWGS84_2DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithWGS84_3DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithCartesian2DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithCartesian3DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithNode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithPath"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithMap"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithRelationship"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testParseRunQueryResponse"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testInvalidQueryHandling"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testCounters"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testInvalidQueryException"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testTransactionCommit"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testTransactionRollback"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testCreateNodeAndCommit"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testCreateNodeAndRollback"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateMovieQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateFriendsQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateKnowsBidirectionalRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateActedInRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testChildQueryPlanExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testParseValidResponse"/>
      </line>
      <line nr="99">
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testRunWithWriteAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testRunWithReadAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testWriteModeWithReadQuery"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\BookmarksIntegrationTest::testCreateBookmarks"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithExactNames"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithSingleName"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithInteger"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithFloat"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithNull"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithBoolean"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithString"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithArray"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithDate"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithDuration"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithWGS84_2DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithWGS84_3DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithCartesian2DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithCartesian3DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithNode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithPath"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithMap"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithRelationship"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testParseRunQueryResponse"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testInvalidQueryHandling"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testCounters"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testInvalidQueryException"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testTransactionCommit"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testTransactionRollback"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testCreateNodeAndCommit"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testCreateNodeAndRollback"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateMovieQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateFriendsQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateKnowsBidirectionalRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateActedInRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testChildQueryPlanExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testParseValidResponse"/>
      </line>
      <line nr="100">
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testRunWithWriteAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testRunWithReadAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testWriteModeWithReadQuery"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\BookmarksIntegrationTest::testCreateBookmarks"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithExactNames"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithSingleName"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithInteger"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithFloat"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithNull"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithBoolean"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithString"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithArray"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithDate"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithDuration"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithWGS84_2DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithWGS84_3DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithCartesian2DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithCartesian3DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithNode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithPath"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithMap"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithRelationship"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testParseRunQueryResponse"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testInvalidQueryHandling"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testCounters"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testInvalidQueryException"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testTransactionCommit"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testTransactionRollback"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testCreateNodeAndCommit"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testCreateNodeAndRollback"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateMovieQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateFriendsQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateKnowsBidirectionalRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateActedInRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testChildQueryPlanExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testParseValidResponse"/>
      </line>
      <line nr="101">
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testRunWithWriteAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testRunWithReadAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testWriteModeWithReadQuery"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\BookmarksIntegrationTest::testCreateBookmarks"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithExactNames"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithSingleName"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithInteger"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithFloat"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithNull"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithBoolean"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithString"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithArray"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithDate"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithDuration"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithWGS84_2DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithWGS84_3DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithCartesian2DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithCartesian3DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithNode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithPath"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithMap"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithRelationship"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testParseRunQueryResponse"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testInvalidQueryHandling"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testCounters"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testInvalidQueryException"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testTransactionCommit"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testTransactionRollback"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testCreateNodeAndCommit"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testCreateNodeAndRollback"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateMovieQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateFriendsQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateKnowsBidirectionalRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateActedInRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testChildQueryPlanExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testParseValidResponse"/>
      </line>
      <line nr="102">
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testRunWithWriteAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testRunWithReadAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testWriteModeWithReadQuery"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\BookmarksIntegrationTest::testCreateBookmarks"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithExactNames"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithSingleName"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithInteger"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithFloat"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithNull"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithBoolean"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithString"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithArray"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithDate"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithDuration"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithWGS84_2DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithWGS84_3DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithCartesian2DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithCartesian3DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithNode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithPath"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithMap"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithRelationship"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testParseRunQueryResponse"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testInvalidQueryHandling"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testCounters"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testInvalidQueryException"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testTransactionCommit"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testTransactionRollback"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testCreateNodeAndCommit"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testCreateNodeAndRollback"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateMovieQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateFriendsQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateKnowsBidirectionalRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateActedInRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testChildQueryPlanExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testParseValidResponse"/>
      </line>
      <line nr="103">
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testRunWithWriteAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testRunWithReadAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testWriteModeWithReadQuery"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\BookmarksIntegrationTest::testCreateBookmarks"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithExactNames"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithSingleName"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithInteger"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithFloat"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithNull"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithBoolean"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithString"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithArray"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithDate"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithDuration"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithWGS84_2DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithWGS84_3DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithCartesian2DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithCartesian3DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithNode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithPath"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithMap"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithRelationship"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testParseRunQueryResponse"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testInvalidQueryHandling"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testCounters"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testInvalidQueryException"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testTransactionCommit"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testTransactionRollback"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testCreateNodeAndCommit"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testCreateNodeAndRollback"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateMovieQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateFriendsQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateKnowsBidirectionalRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateActedInRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testChildQueryPlanExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testParseValidResponse"/>
      </line>
      <line nr="109">
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testRunWithWriteAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testRunWithReadAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testWriteModeWithReadQuery"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\BookmarksIntegrationTest::testCreateBookmarks"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithExactNames"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithSingleName"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithInteger"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithFloat"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithNull"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithBoolean"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithString"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithArray"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithDate"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithDuration"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithWGS84_2DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithWGS84_3DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithCartesian2DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithCartesian3DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithNode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithPath"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithMap"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithRelationship"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testParseRunQueryResponse"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testInvalidQueryHandling"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testCounters"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testInvalidQueryException"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testTransactionCommit"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testTransactionRollback"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testCreateNodeAndCommit"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testCreateNodeAndRollback"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateMovieQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateFriendsQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateKnowsBidirectionalRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateActedInRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testChildQueryPlanExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testRunSuccess"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testParseValidResponse"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testGetAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testParseBookmarks"/>
      </line>
      <line nr="114">
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testRunWithWriteAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testRunWithReadAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testWriteModeWithReadQuery"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\BookmarksIntegrationTest::testCreateBookmarks"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithExactNames"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithSingleName"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithInteger"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithFloat"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithNull"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithBoolean"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithString"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithArray"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithDate"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithDuration"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithWGS84_2DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithWGS84_3DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithCartesian2DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithCartesian3DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithNode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithPath"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithMap"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithRelationship"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testParseRunQueryResponse"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testInvalidQueryHandling"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testCounters"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testInvalidQueryException"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testTransactionCommit"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testTransactionRollback"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testCreateNodeAndCommit"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testCreateNodeAndRollback"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateMovieQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateFriendsQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateKnowsBidirectionalRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateActedInRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testChildQueryPlanExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testRunSuccess"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testParseValidResponse"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testGetAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testParseBookmarks"/>
      </line>
      <line nr="119">
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testRunWithWriteAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testRunWithReadAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testWriteModeWithReadQuery"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\BookmarksIntegrationTest::testCreateBookmarks"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithExactNames"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithSingleName"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithInteger"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithFloat"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithNull"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithBoolean"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithString"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithArray"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithDate"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithDuration"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithWGS84_2DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithWGS84_3DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithCartesian2DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithCartesian3DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithNode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithPath"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithMap"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithRelationship"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testParseRunQueryResponse"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testInvalidQueryHandling"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testCounters"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testInvalidQueryException"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testTransactionCommit"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testTransactionRollback"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testCreateNodeAndCommit"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testCreateNodeAndRollback"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateMovieQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateFriendsQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateKnowsBidirectionalRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateActedInRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testChildQueryPlanExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testRunSuccess"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testParseValidResponse"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testGetAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testParseBookmarks"/>
      </line>
      <line nr="120">
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testRunWithWriteAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testRunWithReadAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testWriteModeWithReadQuery"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\BookmarksIntegrationTest::testCreateBookmarks"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithExactNames"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithSingleName"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithInteger"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithFloat"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithNull"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithBoolean"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithString"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithArray"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithDate"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithDuration"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithWGS84_2DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithWGS84_3DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithCartesian2DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithCartesian3DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithNode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithPath"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithMap"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithRelationship"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testParseRunQueryResponse"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testInvalidQueryHandling"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testCounters"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testInvalidQueryException"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testTransactionCommit"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testTransactionRollback"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testCreateNodeAndCommit"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testCreateNodeAndRollback"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testRunSuccess"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testParseValidResponse"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testGetAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testParseBookmarks"/>
      </line>
      <line nr="124">
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateMovieQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateFriendsQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateKnowsBidirectionalRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateActedInRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testChildQueryPlanExistence"/>
      </line>
      <line nr="125">
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateMovieQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateFriendsQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateKnowsBidirectionalRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateActedInRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testChildQueryPlanExistence"/>
      </line>
      <line nr="126">
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateMovieQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateFriendsQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateKnowsBidirectionalRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateActedInRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testChildQueryPlanExistence"/>
      </line>
      <line nr="128">
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateKnowsBidirectionalRelationships"/>
      </line>
      <line nr="129">
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateMovieQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateFriendsQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateKnowsBidirectionalRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateActedInRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testChildQueryPlanExistence"/>
      </line>
      <line nr="131">
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateMovieQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateFriendsQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateKnowsBidirectionalRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateActedInRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testChildQueryPlanExistence"/>
      </line>
      <line nr="132">
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateMovieQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateFriendsQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateKnowsBidirectionalRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateActedInRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testChildQueryPlanExistence"/>
      </line>
      <line nr="133">
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateMovieQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateFriendsQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateKnowsBidirectionalRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateActedInRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testChildQueryPlanExistence"/>
      </line>
      <line nr="134">
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateMovieQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateFriendsQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateKnowsBidirectionalRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateActedInRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testChildQueryPlanExistence"/>
      </line>
      <line nr="135">
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateMovieQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateFriendsQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateKnowsBidirectionalRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateActedInRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testChildQueryPlanExistence"/>
      </line>
      <line nr="136">
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateMovieQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateFriendsQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateKnowsBidirectionalRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateActedInRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testChildQueryPlanExistence"/>
      </line>
      <line nr="137">
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateMovieQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateFriendsQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateKnowsBidirectionalRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateActedInRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testChildQueryPlanExistence"/>
      </line>
      <line nr="138">
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateMovieQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateFriendsQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateKnowsBidirectionalRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateActedInRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testChildQueryPlanExistence"/>
      </line>
      <line nr="139">
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateMovieQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateFriendsQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateKnowsBidirectionalRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateActedInRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testChildQueryPlanExistence"/>
      </line>
      <line nr="140">
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateMovieQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateFriendsQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateKnowsBidirectionalRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateActedInRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testChildQueryPlanExistence"/>
      </line>
      <line nr="141">
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateMovieQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateFriendsQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateKnowsBidirectionalRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateActedInRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testChildQueryPlanExistence"/>
      </line>
      <line nr="142">
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateMovieQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateFriendsQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateKnowsBidirectionalRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateActedInRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testChildQueryPlanExistence"/>
      </line>
      <line nr="143">
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateMovieQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateFriendsQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateKnowsBidirectionalRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateActedInRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testChildQueryPlanExistence"/>
      </line>
      <line nr="144">
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateMovieQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateFriendsQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateKnowsBidirectionalRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateActedInRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testChildQueryPlanExistence"/>
      </line>
      <line nr="145">
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateMovieQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateFriendsQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateKnowsBidirectionalRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateActedInRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testChildQueryPlanExistence"/>
      </line>
      <line nr="146">
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateMovieQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateFriendsQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateKnowsBidirectionalRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateActedInRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testChildQueryPlanExistence"/>
      </line>
      <line nr="147">
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateMovieQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateFriendsQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateKnowsBidirectionalRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateActedInRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testChildQueryPlanExistence"/>
      </line>
      <line nr="148">
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateMovieQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateFriendsQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateKnowsBidirectionalRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateActedInRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testChildQueryPlanExistence"/>
      </line>
      <line nr="149">
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateMovieQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateFriendsQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateKnowsBidirectionalRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateActedInRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testChildQueryPlanExistence"/>
      </line>
      <line nr="150">
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateMovieQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateFriendsQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateKnowsBidirectionalRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateActedInRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testChildQueryPlanExistence"/>
      </line>
      <line nr="151">
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateMovieQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateFriendsQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateKnowsBidirectionalRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateActedInRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testChildQueryPlanExistence"/>
      </line>
      <line nr="153">
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateMovieQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateFriendsQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateKnowsBidirectionalRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateActedInRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testChildQueryPlanExistence"/>
      </line>
      <line nr="155">
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateMovieQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateFriendsQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateKnowsBidirectionalRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateActedInRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testChildQueryPlanExistence"/>
      </line>
      <line nr="156">
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateMovieQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateFriendsQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateKnowsBidirectionalRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateActedInRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testChildQueryPlanExistence"/>
      </line>
      <line nr="157">
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateMovieQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateFriendsQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateKnowsBidirectionalRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateActedInRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testChildQueryPlanExistence"/>
      </line>
      <line nr="158">
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateMovieQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateFriendsQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateKnowsBidirectionalRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateActedInRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testChildQueryPlanExistence"/>
      </line>
      <line nr="159">
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateMovieQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateFriendsQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateKnowsBidirectionalRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateActedInRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testChildQueryPlanExistence"/>
      </line>
      <line nr="160">
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateMovieQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateFriendsQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateKnowsBidirectionalRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateActedInRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testChildQueryPlanExistence"/>
      </line>
      <line nr="161">
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateMovieQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateFriendsQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateKnowsBidirectionalRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateActedInRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testChildQueryPlanExistence"/>
      </line>
      <line nr="162">
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateMovieQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateFriendsQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateKnowsBidirectionalRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateActedInRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testChildQueryPlanExistence"/>
      </line>
      <line nr="163">
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateMovieQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateFriendsQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateKnowsBidirectionalRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateActedInRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testChildQueryPlanExistence"/>
      </line>
      <line nr="164">
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateMovieQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateFriendsQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateKnowsBidirectionalRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateActedInRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testChildQueryPlanExistence"/>
      </line>
      <line nr="166">
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateMovieQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateFriendsQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateKnowsBidirectionalRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateActedInRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testChildQueryPlanExistence"/>
      </line>
      <line nr="69">
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testRunWithWriteAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testRunWithReadAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testWriteModeWithReadQuery"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\BookmarksIntegrationTest::testCreateBookmarks"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithExactNames"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithSingleName"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithInteger"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithFloat"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithNull"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithBoolean"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithString"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithArray"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithDate"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithDuration"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithWGS84_2DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithWGS84_3DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithCartesian2DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithCartesian3DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithNode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithPath"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithMap"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithRelationship"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testParseRunQueryResponse"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testInvalidQueryHandling"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testCounters"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testInvalidQueryException"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testTransactionCommit"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testTransactionRollback"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testCreateNodeAndCommit"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testCreateNodeAndRollback"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateMovieQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateFriendsQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateKnowsBidirectionalRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateActedInRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testChildQueryPlanExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testRunSuccess"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testParseValidResponse"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testGetAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testParseBookmarks"/>
      </line>
      <line nr="70">
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testRunWithWriteAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testRunWithReadAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testWriteModeWithReadQuery"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\BookmarksIntegrationTest::testCreateBookmarks"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithExactNames"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithSingleName"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithInteger"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithFloat"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithNull"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithBoolean"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithString"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithArray"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithDate"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithDuration"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithWGS84_2DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithWGS84_3DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithCartesian2DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithCartesian3DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithNode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithPath"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithMap"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithRelationship"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testParseRunQueryResponse"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testInvalidQueryHandling"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testCounters"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testInvalidQueryException"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testTransactionCommit"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testTransactionRollback"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testCreateNodeAndCommit"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testCreateNodeAndRollback"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateMovieQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateFriendsQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateKnowsBidirectionalRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateActedInRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testChildQueryPlanExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testRunSuccess"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testParseValidResponse"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testGetAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testParseBookmarks"/>
      </line>
      <line nr="104">
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testRunWithWriteAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testRunWithReadAccessMode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\AccessModesIntegrationTest::testWriteModeWithReadQuery"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\BookmarksIntegrationTest::testCreateBookmarks"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithExactNames"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithSingleName"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithInteger"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithFloat"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithNull"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithBoolean"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithString"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithArray"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithDate"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithDuration"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithWGS84_2DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithWGS84_3DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithCartesian2DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithCartesian3DPoint"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithNode"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithPath"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithMap"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\DataTypesIntegrationTest::testWithRelationship"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testParseRunQueryResponse"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testInvalidQueryHandling"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testCounters"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jQueryAPIIntegrationTest::testInvalidQueryException"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testTransactionCommit"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testTransactionRollback"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testCreateNodeAndCommit"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\Neo4jTransactionIntegrationTest::testCreateNodeAndRollback"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateMovieQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateFriendsQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateKnowsBidirectionalRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateActedInRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testChildQueryPlanExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Unit\Neo4jQueryAPIUnitTest::testParseValidResponse"/>
      </line>
      <line nr="152">
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateMovieQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateFriendsQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateKnowsBidirectionalRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateActedInRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testChildQueryPlanExistence"/>
      </line>
      <line nr="165">
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateMovieQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateFriendsQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateKnowsBidirectionalRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateActedInRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testChildQueryPlanExistence"/>
      </line>
      <line nr="167">
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateMovieQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateFriendsQueryExistence"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateKnowsBidirectionalRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testProfileCreateActedInRelationships"/>
        <covered by="Neo4j\QueryAPI\Tests\Integration\ProfiledQueryPlanIntegrationTest::testChildQueryPlanExistence"/>
      </line>
    </coverage>
    <source>
      <line no="1">
        <token name="T_OPEN_TAG">&lt;?php</token>
      </line>
      <line no="2"/>
      <line no="3">
        <token name="T_NAMESPACE">namespace</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">Neo4j\QueryAPI</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="4"/>
      <line no="5">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">Neo4j\QueryAPI\Enums\AccessMode</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="6">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">Neo4j\QueryAPI\Exception\Neo4jException</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="7">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">Neo4j\QueryAPI\Objects\ProfiledQueryPlanArguments</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="8">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">Psr\Http\Message\ResponseInterface</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="9">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">Neo4j\QueryAPI\Results\ResultSet</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="10">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">Neo4j\QueryAPI\Objects\ResultCounters</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="11">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">Neo4j\QueryAPI\Objects\Bookmarks</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="12">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">Neo4j\QueryAPI\Results\ResultRow</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="13">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">RuntimeException</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="14">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">Neo4j\QueryAPI\Objects\ProfiledQueryPlan</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="15"/>
      <line no="16">
        <token name="T_WHITESPACE"> </token>
        <token name="T_CLASS">class</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ResponseParser</token>
      </line>
      <line no="17">
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="18">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">__construct</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE">  </token>
        <token name="T_STRING">OGM</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$ogm</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="19">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="20">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="21"/>
      <line no="22">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">parseRunQueryResponse</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">ResponseInterface</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$response</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ResultSet</token>
      </line>
      <line no="23">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="24">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$data</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">validateAndDecodeResponse</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$response</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="25"/>
      <line no="26">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$rows</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">mapRows</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$data</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'data'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'fields'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COALESCE">??</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$data</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'data'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'values'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COALESCE">??</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="27">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$counters</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ISSET">isset</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$data</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'counters'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">buildCounters</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$data</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'counters'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="28">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$bookmarks</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">buildBookmarks</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$data</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'bookmarks'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COALESCE">??</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="29">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$profiledQueryPlan</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">buildProfiledQueryPlan</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$data</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'profiledQueryPlan'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COALESCE">??</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="30">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$accessMode</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getAccessMode</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$data</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'accessMode'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COALESCE">??</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="31"/>
      <line no="32">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ResultSet</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$rows</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$bookmarks</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$accessMode</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$counters</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$profiledQueryPlan</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="33">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="34"/>
      <line no="35">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">validateAndDecodeResponse</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">ResponseInterface</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$response</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ARRAY">array</token>
      </line>
      <line no="36">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="37">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$response</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getStatusCode</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_GREATER_OR_EQUAL">&gt;=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">400</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="38">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$errorResponse</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">json_decode</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING_CAST">(string)</token>
        <token name="T_VARIABLE">$response</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getBody</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="39">
        <token name="T_WHITESPACE">            </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Neo4jException</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">fromNeo4jResponse</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$errorResponse</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="40">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="41"/>
      <line no="42">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$contents</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$response</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getBody</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getContents</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="43">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$data</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">json_decode</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$contents</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="44"/>
      <line no="45">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_ISSET">isset</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$data</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'data'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="46">
        <token name="T_WHITESPACE">            </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">RuntimeException</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Invalid response: "data" key missing or null.'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="47">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="48"/>
      <line no="49">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$data</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="50">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="51"/>
      <line no="52">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="53">
        <token name="T_DOC_COMMENT">     * @return list&lt;ResultRow&gt;</token>
      </line>
      <line no="54">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="55">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="56">
        <token name="T_DOC_COMMENT">     * @param list&lt;string&gt; $fields</token>
      </line>
      <line no="57">
        <token name="T_DOC_COMMENT">     * @param list&lt;array&lt;array-key, mixed&gt;&gt; $values</token>
      </line>
      <line no="58">
        <token name="T_DOC_COMMENT">     * @return list&lt;ResultRow&gt;</token>
      </line>
      <line no="59">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="60">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">mapRows</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_ARRAY">array</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$fields</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ARRAY">array</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$values</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ARRAY">array</token>
      </line>
      <line no="61">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="62">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">array_map</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="63">
        <token name="T_WHITESPACE">            </token>
        <token name="T_FN">fn</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_ARRAY">array</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$row</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ResultRow</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ResultRow</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="64">
        <token name="T_WHITESPACE">                </token>
        <token name="T_STRING">array_combine</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="65">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_VARIABLE">$fields</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="66">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_STRING">array_map</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'formatOGMOutput'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$row</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="67">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COMMENT">// Ensure array_combine never returns false</token>
      </line>
      <line no="68">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="69">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$values</token>
      </line>
      <line no="70">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="71">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="72"/>
      <line no="73">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="74">
        <token name="T_DOC_COMMENT">     * Ensures mapped output follows expected format</token>
      </line>
      <line no="75">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="76">
        <token name="T_DOC_COMMENT">     * @param mixed $value</token>
      </line>
      <line no="77">
        <token name="T_DOC_COMMENT">     * @return mixed</token>
      </line>
      <line no="78">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="79">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">formatOGMOutput</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">mixed</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">mixed</token>
      </line>
      <line no="80">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="81">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">is_array</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_AND">&amp;&amp;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">array_key_exists</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'$type'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_AND">&amp;&amp;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">array_key_exists</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'_value'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="82">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">ogm</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">map</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="83">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="84"/>
      <line no="85">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="86">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="87"/>
      <line no="88">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">buildCounters</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_ARRAY">array</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$countersData</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ResultCounters</token>
      </line>
      <line no="89">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="90">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ResultCounters</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="91">
        <token name="T_WHITESPACE">            </token>
        <token name="T_STRING">containsUpdates</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$countersData</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'containsUpdates'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COALESCE">??</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="92">
        <token name="T_WHITESPACE">            </token>
        <token name="T_STRING">nodesCreated</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$countersData</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'nodesCreated'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COALESCE">??</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="93">
        <token name="T_WHITESPACE">            </token>
        <token name="T_STRING">nodesDeleted</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$countersData</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'nodesDeleted'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COALESCE">??</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="94">
        <token name="T_WHITESPACE">            </token>
        <token name="T_STRING">propertiesSet</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$countersData</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'propertiesSet'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COALESCE">??</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="95">
        <token name="T_WHITESPACE">            </token>
        <token name="T_STRING">relationshipsCreated</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$countersData</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'relationshipsCreated'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COALESCE">??</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="96">
        <token name="T_WHITESPACE">            </token>
        <token name="T_STRING">relationshipsDeleted</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$countersData</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'relationshipsDeleted'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COALESCE">??</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="97">
        <token name="T_WHITESPACE">            </token>
        <token name="T_STRING">labelsAdded</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$countersData</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'labelsAdded'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COALESCE">??</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="98">
        <token name="T_WHITESPACE">            </token>
        <token name="T_STRING">labelsRemoved</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$countersData</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'labelsRemoved'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COALESCE">??</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="99">
        <token name="T_WHITESPACE">            </token>
        <token name="T_STRING">indexesAdded</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$countersData</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'indexesAdded'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COALESCE">??</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="100">
        <token name="T_WHITESPACE">            </token>
        <token name="T_STRING">indexesRemoved</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$countersData</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'indexesRemoved'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COALESCE">??</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="101">
        <token name="T_WHITESPACE">            </token>
        <token name="T_STRING">constraintsAdded</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$countersData</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'constraintsAdded'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COALESCE">??</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="102">
        <token name="T_WHITESPACE">            </token>
        <token name="T_STRING">constraintsRemoved</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$countersData</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'constraintsRemoved'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COALESCE">??</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="103">
        <token name="T_WHITESPACE">            </token>
        <token name="T_STRING">systemUpdates</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$countersData</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'systemUpdates'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COALESCE">??</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="104">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="105">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="106"/>
      <line no="107">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">buildBookmarks</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_ARRAY">array</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$bookmarksData</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Bookmarks</token>
      </line>
      <line no="108">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="109">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Bookmarks</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$bookmarksData</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="110">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="111"/>
      <line no="112">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">getAccessMode</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$accessModeData</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">AccessMode</token>
      </line>
      <line no="113">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="114">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">AccessMode</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">tryFrom</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$accessModeData</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COALESCE">??</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">AccessMode</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">WRITE</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="115">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="116"/>
      <line no="117">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">buildProfiledQueryPlan</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">mixed</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$queryPlanData</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_STRING">ProfiledQueryPlan</token>
      </line>
      <line no="118">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="119">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">is_array</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$queryPlanData</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="120">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="121">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="122"/>
      <line no="123">
        <token name="T_WHITESPACE">        </token>
        <token name="T_DOC_COMMENT">/** @var array&lt;array-key, mixed&gt; $mappedArguments */</token>
      </line>
      <line no="124">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$mappedArguments</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">array_map</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">mixed</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">mixed</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="125">
        <token name="T_WHITESPACE">            </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">is_array</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_AND">&amp;&amp;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">array_key_exists</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'$type'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_AND">&amp;&amp;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">array_key_exists</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'_value'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="126">
        <token name="T_WHITESPACE">                </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">ogm</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">map</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="127">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="128">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="129">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$queryPlanData</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'arguments'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COALESCE">??</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="130"/>
      <line no="131">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$queryArguments</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ProfiledQueryPlanArguments</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="132">
        <token name="T_WHITESPACE">            </token>
        <token name="T_STRING">globalMemory</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$mappedArguments</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'GlobalMemory'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COALESCE">??</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="133">
        <token name="T_WHITESPACE">            </token>
        <token name="T_STRING">plannerImpl</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$mappedArguments</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'planner-impl'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COALESCE">??</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="134">
        <token name="T_WHITESPACE">            </token>
        <token name="T_STRING">memory</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$mappedArguments</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Memory'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COALESCE">??</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="135">
        <token name="T_WHITESPACE">            </token>
        <token name="T_STRING">stringRepresentation</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$mappedArguments</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'string-representation'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COALESCE">??</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="136">
        <token name="T_WHITESPACE">            </token>
        <token name="T_STRING">runtime</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$mappedArguments</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'runtime'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COALESCE">??</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="137">
        <token name="T_WHITESPACE">            </token>
        <token name="T_STRING">time</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$mappedArguments</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Time'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COALESCE">??</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="138">
        <token name="T_WHITESPACE">            </token>
        <token name="T_STRING">pageCacheMisses</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$mappedArguments</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'PageCacheMisses'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COALESCE">??</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="139">
        <token name="T_WHITESPACE">            </token>
        <token name="T_STRING">pageCacheHits</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$mappedArguments</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'PageCacheHits'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COALESCE">??</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="140">
        <token name="T_WHITESPACE">            </token>
        <token name="T_STRING">runtimeImpl</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$mappedArguments</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'runtime-impl'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COALESCE">??</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="141">
        <token name="T_WHITESPACE">            </token>
        <token name="T_STRING">version</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$mappedArguments</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'version'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COALESCE">??</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="142">
        <token name="T_WHITESPACE">            </token>
        <token name="T_STRING">dbHits</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$mappedArguments</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'DbHits'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COALESCE">??</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="143">
        <token name="T_WHITESPACE">            </token>
        <token name="T_STRING">batchSize</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$mappedArguments</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'batch-size'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COALESCE">??</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="144">
        <token name="T_WHITESPACE">            </token>
        <token name="T_STRING">details</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$mappedArguments</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Details'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COALESCE">??</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="145">
        <token name="T_WHITESPACE">            </token>
        <token name="T_STRING">plannerVersion</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$mappedArguments</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'planner-version'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COALESCE">??</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="146">
        <token name="T_WHITESPACE">            </token>
        <token name="T_STRING">pipelineInfo</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$mappedArguments</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'PipelineInfo'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COALESCE">??</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="147">
        <token name="T_WHITESPACE">            </token>
        <token name="T_STRING">runtimeVersion</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$mappedArguments</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'runtime-version'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COALESCE">??</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="148">
        <token name="T_WHITESPACE">            </token>
        <token name="T_STRING">id</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$mappedArguments</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Id'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COALESCE">??</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="149">
        <token name="T_WHITESPACE">            </token>
        <token name="T_STRING">estimatedRows</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$mappedArguments</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'EstimatedRows'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COALESCE">??</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="150">
        <token name="T_WHITESPACE">            </token>
        <token name="T_STRING">planner</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$mappedArguments</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'planner'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COALESCE">??</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="151">
        <token name="T_WHITESPACE">            </token>
        <token name="T_STRING">rows</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$mappedArguments</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Rows'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COALESCE">??</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
      </line>
      <line no="152">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="153">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$children</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">array_map</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_FN">fn</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">mixed</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$child</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_STRING">ProfiledQueryPlan</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">buildProfiledQueryPlan</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$child</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$queryPlanData</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'children'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COALESCE">??</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="154"/>
      <line no="155">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ProfiledQueryPlan</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="156">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$queryArguments</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="157">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$queryPlanData</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'dbHits'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COALESCE">??</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="158">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$queryPlanData</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'records'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COALESCE">??</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="159">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$queryPlanData</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'hasPageCacheStats'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COALESCE">??</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="160">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$queryPlanData</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'pageCacheHits'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COALESCE">??</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="161">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$queryPlanData</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'pageCacheMisses'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COALESCE">??</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="162">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$queryPlanData</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'pageCacheHitRatio'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COALESCE">??</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DNUMBER">0.0</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="163">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$queryPlanData</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'time'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COALESCE">??</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="164">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$queryPlanData</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'operatorType'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COALESCE">??</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="165">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$children</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="166">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$queryPlanData</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'identifiers'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COALESCE">??</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
      </line>
      <line no="167">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="168"/>
      <line no="169">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="170">
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="171"/>
    </source>
  </file>
</phpunit>
